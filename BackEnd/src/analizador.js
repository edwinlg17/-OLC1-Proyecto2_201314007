/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[5,8,13],$V3=[15,16],$V4=[1,18],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[12,19,79,80,81,82,83],$Vb=[15,57],$Vc=[2,51],$Vd=[1,35],$Ve=[1,37],$Vf=[2,88],$Vg=[1,52],$Vh=[1,55],$Vi=[1,48],$Vj=[1,49],$Vk=[1,45],$Vl=[1,46],$Vm=[1,50],$Vn=[1,51],$Vo=[1,53],$Vp=[1,54],$Vq=[15,22,53,57],$Vr=[15,22,29,47,48,53,57,61,62,63,64,65,66,67,68,69],$Vs=[1,85],$Vt=[2,19],$Vu=[1,86],$Vv=[1,87],$Vw=[1,88],$Vx=[1,89],$Vy=[1,90],$Vz=[1,91],$VA=[1,92],$VB=[1,93],$VC=[1,94],$VD=[22,57],$VE=[9,21,47,65,70,71,73,74,75,76],$VF=[12,52],$VG=[9,12,31,34,36,38,41,42,43,44,45,52,79,80,81,82,83],$VH=[2,41],$VI=[1,185];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"CLAIMP":4,"EOF":5,"CLAIMPP":6,"SINCLAIMP":7,"tkRCla":8,"tkIde":9,"tkSLlaAbr":10,"MMFV":11,"tkSLlaCie":12,"tkRImp":13,"ESPIMP":14,"tkSPunCom":15,"tkSPun":16,"MMFVP":17,"SINMMFV":18,"tkRVoi":19,"tkRMai":20,"tkSParAbr":21,"tkSParCie":22,"INS":23,"PAR":24,"TIP":25,"DECVARMUL":26,"INSP":27,"SININS":28,"tkSIgu":29,"EXP":30,"tkRSis":31,"tkROut":32,"PRI":33,"tkRIf":34,"ELS":35,"tkRSwi":36,"CAS":37,"tkRFor":38,"DECASI":39,"ASIINC":40,"tkRWhi":41,"tkRDo":42,"tkRBre":43,"tkRCon":44,"tkRRet":45,"INC":46,"tkSGui":47,"tkSMas":48,"tkREls":49,"ELSP":50,"CASP":51,"tkRCas":52,"tkSDosPun":53,"tkRDef":54,"tkRPri":55,"tkRPriLn":56,"tkSCom":57,"VAL":58,"EXPP":59,"OPE":60,"tkSPor":61,"tkSBarInc":62,"tkSPot":63,"tkSMod":64,"tkSAdm":65,"tkSMay":66,"tkSMen":67,"tkSAmp":68,"tkSBarVer":69,"tkCad":70,"tkCar":71,"VAL2":72,"tkNum":73,"tkDec":74,"tkRTru":75,"tkRFal":76,"LISEXP":77,"LISPAR":78,"tkRInt":79,"tkRDou":80,"tkRCha":81,"tkRStr":82,"tkRBoo":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"tkRCla",9:"tkIde",10:"tkSLlaAbr",12:"tkSLlaCie",13:"tkRImp",15:"tkSPunCom",16:"tkSPun",19:"tkRVoi",20:"tkRMai",21:"tkSParAbr",22:"tkSParCie",29:"tkSIgu",31:"tkRSis",32:"tkROut",34:"tkRIf",36:"tkRSwi",38:"tkRFor",41:"tkRWhi",42:"tkRDo",43:"tkRBre",44:"tkRCon",45:"tkRRet",47:"tkSGui",48:"tkSMas",49:"tkREls",52:"tkRCas",53:"tkSDosPun",54:"tkRDef",55:"tkRPri",56:"tkRPriLn",57:"tkSCom",61:"tkSPor",62:"tkSBarInc",63:"tkSPot",64:"tkSMod",65:"tkSAdm",66:"tkSMay",67:"tkSMen",68:"tkSAmp",69:"tkSBarVer",70:"tkCad",71:"tkCar",73:"tkNum",74:"tkDec",75:"tkRTru",76:"tkRFal",79:"tkRInt",80:"tkRDou",81:"tkRCha",82:"tkRStr",83:"tkRBoo"},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[6,1],[7,5],[7,3],[14,3],[14,1],[11,1],[11,0],[17,2],[17,1],[18,7],[18,8],[18,8],[18,3],[23,1],[23,0],[27,2],[27,1],[28,3],[28,4],[28,9],[28,8],[28,7],[28,11],[28,7],[28,9],[28,2],[28,2],[28,2],[28,3],[39,4],[39,3],[40,3],[40,2],[46,2],[46,2],[35,2],[35,0],[50,8],[50,3],[37,1],[37,0],[51,4],[51,5],[51,3],[33,1],[33,1],[26,1],[26,3],[26,3],[26,5],[30,2],[59,2],[59,0],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,2],[60,2],[60,2],[60,2],[60,1],[60,1],[60,2],[60,2],[58,1],[58,1],[58,1],[58,2],[58,2],[72,1],[72,1],[72,1],[72,1],[72,1],[72,3],[72,4],[72,3],[77,1],[77,3],[24,1],[24,0],[78,2],[78,4],[25,1],[25,1],[25,1],[25,1],[25,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 3: case 11: case 19: case 41: case 45: case 57: case 88:
 this.$ = ''; 
break;
case 6:
 console.log($$[$0-4] + ' ' + $$[$0-3]  + ' ' + $$[$0-2]  + ' ' + $$[$0]); 
break;
case 7:
 console.log($$[$0-2] + ' ' + $$[$0-1] + $$[$0]); 
break;
case 8:
 this.$ = $$[$0-2] + ' ' + $$[$0-1] + ' ' +  $$[$0]; 
break;
case 9:
 this.$ = $$[$0]; 
break;
case 14:
 console.log($$[$0-6] + ' ' + $$[$0-5]  + ' ' + $$[$0-4] + ' ' + $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1]); 
break;
case 15: case 16: case 25:
 console.log($$[$0-7] + ' ' + $$[$0-6]  + ' ' + $$[$0-5] + ' ' + $$[$0-4] + ' ' + $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1]); 
break;
case 17: case 22:
 console.log($$[$0-2] + ' ' + $$[$0-1]  + ' ' + $$[$0] ); 
break;
case 23:
 console.log($$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0]); 
break;
case 24:
 console.log($$[$0-8] + ' ' + $$[$0-7]  + ' ' + $$[$0-6] + ' ' + $$[$0-5] + ' ' + $$[$0-4] + ' ' + $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0]); 
break;
case 26:
 console.log($$[$0-6] + ' ' + $$[$0-5]  + ' ' + $$[$0-4] + ' ' + $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0]); 
break;
case 27:
 console.log($$[$0-10] + ' ' + $$[$0-9]  + ' ' + $$[$0-8] + ' ' + $$[$0-7] + ' ' + $$[$0-6] + ' ' + $$[$0-5] + ' ' + $$[$0-4] + ' ' + $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0]); 
break;
case 28:
 console.log($$[$0-6] + ' ' + $$[$0-5]  + ' ' + $$[$0-4] + ' ' + $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0]); 
break;
case 29:
 console.log($$[$0-8] + ' ' + $$[$0-7]  + ' ' + $$[$0-5] + ' ' + $$[$0-4] + ' ' + $$[$0-3] + ' ' + $$[$0-2] +  ' ' + $$[$0-1] + ' ' + $$[$0]); 
break;
case 30: case 31: case 32: case 40:
 console.log($$[$0-1] + ' ' + $$[$0]); 
break;
case 33:
 console.log($$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0]); 
break;
case 34: case 83:
 this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 35: case 36: case 52: case 53: case 82: case 84: case 86:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 37: case 38: case 39: case 64: case 65: case 66: case 67: case 70: case 71: case 75: case 76:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 42:
 this.$ = $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-1]; 
break;
case 43:
 this.$ = $$[$0-2] + $$[$0]; 
break;
case 46: case 47:
 console.log($$[$0-3]  + ' ' + $$[$0-2] + ' ' + $$[$0-1]); 
break;
case 48:
 console.log($$[$0-2]  + ' ' + $$[$0-1]); 
break;
case 54:
 this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 55: case 56:
 if($$[$0] == '') this.$ = $$[$0-1]; else this.$ = $$[$0-1] + $$[$0]; 
break;
}
},
table: [{3:1,4:2,5:[2,3],6:3,7:4,8:$V0,13:$V1},{1:[3]},{5:[1,7]},{5:[2,2],7:8,8:$V0,13:$V1},o($V2,[2,5]),{9:[1,9]},{9:[1,11],14:10},{1:[2,1]},o($V2,[2,4]),{10:[1,12]},{15:[1,13],16:[1,14]},o($V3,[2,9]),{11:15,12:[2,11],17:16,18:17,19:$V4,25:19,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9},o($V2,[2,7]),{9:[1,25]},{12:[1,26]},{12:[2,10],18:27,19:$V4,25:19,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9},o($Va,[2,13]),{9:[1,29],20:[1,28]},{9:[1,30],26:31},{9:[2,91]},{9:[2,92]},{9:[2,93]},{9:[2,94]},{9:[2,95]},o($V3,[2,8]),o($V2,[2,6]),o($Va,[2,12]),{21:[1,32]},{21:[1,33]},o($Vb,$Vc,{21:[1,34],29:$Vd}),{15:[1,36],57:$Ve},{22:[1,38]},{22:$Vf,24:39,25:41,78:40,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9},{22:$Vf,24:42,25:41,78:40,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9},{9:$Vg,21:$Vh,30:43,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},o($Va,[2,17]),{9:[1,56]},{10:[1,57]},{22:[1,58]},{22:[2,87],57:[1,59]},{9:[1,60]},{22:[1,61]},o($Vb,[2,52]),o($Vq,[2,57],{59:62,60:63,29:[1,70],47:[1,65],48:[1,64],61:[1,66],62:[1,67],63:[1,68],64:[1,69],65:[1,71],66:[1,72],67:[1,73],68:[1,74],69:[1,75]}),o($Vr,[2,72]),o($Vr,[2,73]),o($Vr,[2,74]),{9:$Vg,21:$Vh,72:76,73:$Vm,74:$Vn,75:$Vo,76:$Vp},{9:$Vg,21:$Vh,72:77,73:$Vm,74:$Vn,75:$Vo,76:$Vp},o($Vr,[2,77]),o($Vr,[2,78]),o($Vr,[2,79],{21:[1,78]}),o($Vr,[2,80]),o($Vr,[2,81]),{9:$Vg,21:$Vh,30:79,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},o($Vb,[2,53],{29:[1,80]}),{9:$Vs,12:$Vt,23:81,25:84,27:82,28:83,31:$Vu,34:$Vv,36:$Vw,38:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9},{10:[1,95]},{25:96,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9},o($VD,[2,89]),{10:[1,97]},o($Vq,[2,55]),{9:$Vg,21:$Vh,30:98,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},o($VE,[2,58]),o($VE,[2,59]),o($VE,[2,60]),o($VE,[2,61]),o($VE,[2,62]),o($VE,[2,63]),{29:[1,99]},{29:[1,100]},o($VE,[2,68],{29:[1,101]}),o($VE,[2,69],{29:[1,102]}),{68:[1,103]},{69:[1,104]},o($Vr,[2,75]),o($Vr,[2,76]),{9:$Vg,21:$Vh,22:[1,105],30:107,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:106},{22:[1,108]},{9:$Vg,21:$Vh,30:109,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},{12:[1,110]},o($VF,[2,18],{25:84,28:111,9:$Vs,31:$Vu,34:$Vv,36:$Vw,38:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9}),o($VG,[2,21]),{9:[1,113],26:112},{29:[1,114]},{16:[1,115]},{21:[1,116]},{21:[1,117]},{21:[1,118]},{21:[1,119]},{10:[1,120]},{15:[1,121]},{15:[1,122]},{9:$Vg,15:[1,123],21:$Vh,30:124,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},{9:$Vs,12:$Vt,23:125,25:84,27:82,28:83,31:$Vu,34:$Vv,36:$Vw,38:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9},{9:[1,126]},{9:$Vs,12:$Vt,23:127,25:84,27:82,28:83,31:$Vu,34:$Vv,36:$Vw,38:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9},o($Vq,[2,56]),o($VE,[2,64]),o($VE,[2,65]),o($VE,[2,66]),o($VE,[2,67]),o($VE,[2,70]),o($VE,[2,71]),o($Vr,[2,82]),{22:[1,128],57:[1,129]},o($VD,[2,85]),o($Vr,[2,84]),o($Vb,[2,54]),o($Va,[2,14]),o($VG,[2,20]),{15:[1,130],57:$Ve},o($Vb,$Vc,{29:$Vd}),{9:$Vg,21:$Vh,30:131,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},{32:[1,132]},{9:$Vg,21:$Vh,30:133,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},{9:$Vg,21:$Vh,30:134,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},{9:[1,137],25:136,39:135,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9},{9:$Vg,21:$Vh,30:138,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},{9:$Vs,12:$Vt,23:139,25:84,27:82,28:83,31:$Vu,34:$Vv,36:$Vw,38:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9},o($VG,[2,30]),o($VG,[2,31]),o($VG,[2,32]),{15:[1,140]},{12:[1,141]},o($VD,[2,90]),{12:[1,142]},o($Vr,[2,83]),{9:$Vg,21:$Vh,30:143,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},o($VG,[2,22]),{15:[1,144]},{16:[1,145]},{22:[1,146]},{22:[1,147]},{15:[1,148]},{9:[1,149]},{29:[1,150]},{22:[1,151]},{12:[1,152]},o($VG,[2,33]),o($Va,[2,15]),o($Va,[2,16]),o($VD,[2,86]),o($VG,[2,23]),{33:153,55:[1,154],56:[1,155]},{10:[1,156]},{10:[1,157]},{9:$Vg,21:$Vh,30:158,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},{29:[1,159]},{9:$Vg,21:$Vh,30:160,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},{10:[1,161]},{41:[1,162]},{21:[1,163]},{21:[2,49]},{21:[2,50]},{9:$Vs,12:$Vt,23:164,25:84,27:82,28:83,31:$Vu,34:$Vv,36:$Vw,38:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9},{12:[2,45],37:165,51:166,52:[1,167],54:[1,168]},{15:[1,169]},{9:$Vg,21:$Vh,30:170,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},{15:[2,35]},{9:$Vs,12:$Vt,23:171,25:84,27:82,28:83,31:$Vu,34:$Vv,36:$Vw,38:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9},{21:[1,172]},{9:$Vg,21:$Vh,30:173,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},{12:[1,174]},{12:[1,175]},{12:[2,44],52:[1,176]},{9:$Vg,21:$Vh,30:177,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},{53:[1,178]},{9:[1,180],40:179},{15:[2,34]},{12:[1,181]},{9:$Vg,21:$Vh,30:182,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},{22:[1,183]},o($VG,$VH,{35:184,49:$VI}),o($VG,[2,26]),{9:$Vg,21:$Vh,30:186,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},{53:[1,187]},o($VF,$Vt,{27:82,28:83,25:84,23:188,9:$Vs,31:$Vu,34:$Vv,36:$Vw,38:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9}),{22:[1,189]},{29:[1,190],46:191,47:[1,192],48:[1,193]},o($VG,[2,28]),{22:[1,194]},{15:[1,195]},o($VG,[2,25]),{10:[1,198],34:[1,197],50:196},{53:[1,199]},o($VF,$Vt,{27:82,28:83,25:84,23:200,9:$Vs,31:$Vu,34:$Vv,36:$Vw,38:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9}),o($VF,[2,48]),{10:[1,201]},{9:$Vg,21:$Vh,30:202,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},{22:[2,37]},{47:[1,203]},{48:[1,204]},{15:[1,205]},o($VG,[2,24]),o($VG,[2,40]),{21:[1,206]},{9:$Vs,12:$Vt,23:207,25:84,27:82,28:83,31:$Vu,34:$Vv,36:$Vw,38:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9},o($VF,$Vt,{27:82,28:83,25:84,23:208,9:$Vs,31:$Vu,34:$Vv,36:$Vw,38:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9}),o($VF,[2,46]),{9:$Vs,12:$Vt,23:209,25:84,27:82,28:83,31:$Vu,34:$Vv,36:$Vw,38:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9},{22:[2,36]},{22:[2,38]},{22:[2,39]},o($VG,[2,29]),{9:$Vg,21:$Vh,30:210,47:$Vi,58:44,65:$Vj,70:$Vk,71:$Vl,72:47,73:$Vm,74:$Vn,75:$Vo,76:$Vp},{12:[1,211]},o($VF,[2,47]),{12:[1,212]},{22:[1,213]},o($VG,[2,43]),o($VG,[2,27]),{10:[1,214]},{9:$Vs,12:$Vt,23:215,25:84,27:82,28:83,31:$Vu,34:$Vv,36:$Vw,38:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,79:$V5,80:$V6,81:$V7,82:$V8,83:$V9},{12:[1,216]},o($VG,$VH,{35:217,49:$VI}),o($VG,[2,42])],
defaultActions: {7:[2,1],20:[2,91],21:[2,92],22:[2,93],23:[2,94],24:[2,95],154:[2,49],155:[2,50],160:[2,35],170:[2,34],191:[2,37],202:[2,36],203:[2,38],204:[2,39]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple
break;
case 1:// comentario multilinea
break;
case 2: yy_.yytext.substr(1,yy_.yyleng-2); return 71; 
break;
case 3: yy_.yytext.substr(1,yy_.yyleng-2); return 71; 
break;
case 4: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 70; 
break;
case 5: return 13; 
break;
case 6: return 8; 
break;
case 7: return 'tkRPub'; 
break;
case 8: return 55; 
break;
case 9: return 'tkRPro'; 
break;
case 10: return 'tkRSta'; 
break;
case 11: return 19; 
break;
case 12: return 20; 
break;
case 13: return 79; 
break;
case 14: return 80; 
break;
case 15: return 83; 
break;
case 16: return 81; 
break;
case 17: return 82; 
break;
case 18: return 75; 
break;
case 19: return 76; 
break;
case 20: return 31; 
break;
case 21: return 32; 
break;
case 22: return 55; 
break;
case 23: return 56; 
break;
case 24: return 43; 
break;
case 25: return 44; 
break;
case 26: return 45; 
break;
case 27: return 34; 
break;
case 28: return 49; 
break;
case 29: return 36; 
break;
case 30: return 52; 
break;
case 31: return 54; 
break;
case 32: return 38; 
break;
case 33: return 41; 
break;
case 34: return 42; 
break;
case 35: return 48; 
break;
case 36: return 47; 
break;
case 37: return 61; 
break;
case 38: return 62; 
break;
case 39: return 63; 
break;
case 40: return 64; 
break;
case 41: return 'tkSComSim'; 
break;
case 42: return 'tkSComDob'; 
break;
case 43: return 'tkSBarInv'; 
break;
case 44: return 68; 
break;
case 45: return 69; 
break;
case 46: return 65; 
break;
case 47: return 29; 
break;
case 48: return 66; 
break;
case 49: return 67; 
break;
case 50: return 57; 
break;
case 51: return 16; 
break;
case 52: return 15; 
break;
case 53: return 53; 
break;
case 54: return 21; 
break;
case 55: return 22; 
break;
case 56: return 10; 
break;
case 57: return 12; 
break;
case 58: return 9; 
break;
case 59: return 74; 
break;
case 60: return 73; 
break;
case 61:// se ignoran espacios en blanco
break;
case 62:return 5;       // fin del archivo
break;
case 63: console.log('Error Lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/[^\n]*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[\'][\\][ntr\"\'\\][\'])/,/^(?:[\'][^\'\"\\][\'])/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:import\b)/,/^(?:class\b)/,/^(?:public\b)/,/^(?:private\b)/,/^(?:protected\b)/,/^(?:static\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:')/,/^(?:")/,/^(?:\\)/,/^(?:&)/,/^(?:\|)/,/^(?:!)/,/^(?:=)/,/^(?:>)/,/^(?:<)/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:\s+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}