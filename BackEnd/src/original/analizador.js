/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,5],$V2=[1,6],$V3=[2,5,8,13],$V4=[1,16],$V5=[1,15],$V6=[1,14],$V7=[15,17],$V8=[2,5,8,9,12,13,20,32,35,37,39,42,43,44,45,46,50,52,83,84,85,86,87],$V9=[1,25],$Va=[1,23],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[1,30],$Vg=[2,12,20,83,84,85,86,87],$Vh=[15,56],$Vi=[2,53],$Vj=[1,43],$Vk=[1,45],$Vl=[2,87],$Vm=[1,61],$Vn=[1,62],$Vo=[1,52],$Vp=[1,53],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[1,58],$Vu=[1,59],$Vv=[1,60],$Vw=[1,64],$Vx=[1,70],$Vy=[1,71],$Vz=[1,72],$VA=[1,73],$VB=[1,74],$VC=[1,75],$VD=[1,76],$VE=[1,77],$VF=[1,78],$VG=[1,79],$VH=[1,80],$VI=[1,81],$VJ=[1,82],$VK=[1,83],$VL=[15,23,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],$VM=[15,23,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74],$VN=[2,80],$VO=[1,88],$VP=[1,104],$VQ=[1,94],$VR=[2,21],$VS=[1,95],$VT=[1,96],$VU=[1,97],$VV=[1,98],$VW=[1,99],$VX=[1,100],$VY=[1,101],$VZ=[1,102],$V_=[1,103],$V$=[23,56],$V01=[12,50,52],$V11=[2,9,12,32,35,37,39,42,43,44,45,46,50,52,83,84,85,86,87],$V21=[15,23,51,56,57,58],$V31=[15,23,51,56,57,58,59,60,61,62,63,64],$V41=[15,23,51,56,57,58,59,60,61,62,63,64,65,66],$V51=[15,23,51,56,57,58,59,60,61,62,63,64,65,66,67,68],$V61=[2,46],$V71=[1,183],$V81=[1,184],$V91=[2,42],$Va1=[1,201];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"CLAIMP":4,"EOF":5,"CLAIMPP":6,"SINCLAIMP":7,"tkRCla":8,"tkIde":9,"tkSLlaAbr":10,"MMFV":11,"tkSLlaCie":12,"tkRImp":13,"ESPIMP":14,"tkSPunCom":15,"REQ":16,"tkSPun":17,"MMFVP":18,"SINMMFV":19,"tkRVoi":20,"tkRMai":21,"tkSParAbr":22,"tkSParCie":23,"INS":24,"PAR":25,"TIP":26,"DECVARMUL":27,"INSP":28,"SININS":29,"tkSIgu":30,"EXP":31,"tkRSis":32,"tkROut":33,"PRI":34,"tkRIf":35,"ELS":36,"tkRSwi":37,"CAS":38,"tkRFor":39,"DECASI":40,"ASIINC":41,"tkRWhi":42,"tkRDo":43,"tkRBre":44,"tkRCon":45,"tkRRet":46,"tkREls":47,"SINELS":48,"CASP":49,"tkRCas":50,"tkSDosPun":51,"tkRDef":52,"tkRPri":53,"tkRPriLn":54,"SINVAR":55,"tkSCom":56,"tkSAnd":57,"tkSOr":58,"tkSDIgu":59,"tkSMay":60,"tkSMayIgu":61,"tkSMen":62,"tkSMenIgu":63,"tkSDif":64,"tkSMas":65,"tkSGui":66,"tkSPor":67,"tkSBarInc":68,"tkSPot":69,"tkSMod":70,"tkSAdm":71,"VAL":72,"tkSInc":73,"tkSDec":74,"tkNum":75,"tkDec":76,"tkCad":77,"tkCar":78,"tkRTru":79,"tkRFal":80,"LISEXP":81,"LISPAR":82,"tkRInt":83,"tkRDou":84,"tkRCha":85,"tkRStr":86,"tkRBoo":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"tkRCla",9:"tkIde",10:"tkSLlaAbr",12:"tkSLlaCie",13:"tkRImp",15:"tkSPunCom",17:"tkSPun",20:"tkRVoi",21:"tkRMai",22:"tkSParAbr",23:"tkSParCie",30:"tkSIgu",32:"tkRSis",33:"tkROut",35:"tkRIf",37:"tkRSwi",39:"tkRFor",42:"tkRWhi",43:"tkRDo",44:"tkRBre",45:"tkRCon",46:"tkRRet",47:"tkREls",50:"tkRCas",51:"tkSDosPun",52:"tkRDef",53:"tkRPri",54:"tkRPriLn",56:"tkSCom",57:"tkSAnd",58:"tkSOr",59:"tkSDIgu",60:"tkSMay",61:"tkSMayIgu",62:"tkSMen",63:"tkSMenIgu",64:"tkSDif",65:"tkSMas",66:"tkSGui",67:"tkSPor",68:"tkSBarInc",69:"tkSPot",70:"tkSMod",71:"tkSAdm",73:"tkSInc",74:"tkSDec",75:"tkNum",76:"tkDec",77:"tkCad",78:"tkCar",79:"tkRTru",80:"tkRFal",83:"tkRInt",84:"tkRDou",85:"tkRCha",86:"tkRStr",87:"tkRBoo"},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[6,1],[7,5],[7,3],[7,2],[14,3],[14,1],[11,1],[11,0],[18,2],[18,1],[19,7],[19,8],[19,8],[19,3],[19,2],[24,1],[24,0],[28,2],[28,1],[29,3],[29,4],[29,9],[29,8],[29,7],[29,11],[29,7],[29,9],[29,2],[29,2],[29,2],[29,3],[29,2],[40,4],[40,3],[41,3],[41,1],[36,2],[36,0],[48,8],[48,3],[38,1],[38,0],[49,5],[49,3],[34,1],[34,1],[27,1],[27,3],[55,1],[55,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,2],[31,2],[31,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,3],[72,4],[72,3],[81,1],[81,3],[25,1],[25,0],[82,2],[82,4],[26,1],[26,1],[26,1],[26,1],[26,1],[16,1],[16,1],[16,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 3: case 12: case 21: case 46: case 87:
 this.$ = 'indefinido'; 
break;
case 4: case 13: case 22:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 5: case 14: case 51: case 84:
 this.$ = [$$[$0]]; 
break;
case 6:
 this.$ = insAPI.cla($$[$0-3], $$[$0-1]); 
break;
case 7:
 this.$ = insAPI.imp($$[$0-1]); 
break;
case 8:
 console.log('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 9:
 $$[$0-2].push(insAPI.val('identificador',$$[$0])); this.$ = $$[$0-2]; 
break;
case 10:
 this.$ = [insAPI.val('identificador',$$[$0])]; 
break;
case 15:
 this.$ = insAPI.mai($$[$0-1]); 
break;
case 16:
 this.$ = insAPI.met($$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 17:
 this.$ = insAPI.fun($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 18: case 24:
 this.$ = insAPI.dec($$[$0-2], $$[$0-1]); 
break;
case 19: case 36:
 console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 23:
 
        if(Array.isArray($$[$0])) { 
            this.$ = $$[$0]; 
        } else { 
            this.$ = [$$[$0]]; 
        } 
    
break;
case 25:
 this.$ = insAPI.asi($$[$0-3], $$[$0-1]); 
break;
case 26:
 this.$ = insAPI.pri($$[$0-4], $$[$0-2]); 
break;
case 27:
 
        var a = []; 
        if(Array.isArray($$[$0])){ 
            $$[$0].unshift(insAPI.if($$[$0-5], $$[$0-2])); 
            this.$ = $$[$0]; 
        } else { 
            if($$[$0] != '')
                a.push($$[$0]);
            a.unshift(insAPI.if($$[$0-5], $$[$0-2])); 
            this.$ = a; 
        } 
    
break;
case 28:
 this.$ = insAPI.swi($$[$0-4], $$[$0-1]); 
break;
case 29:
 this.$ = insAPI.for($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 30:
 this.$ = insAPI.whi($$[$0-4], $$[$0-1]);  
break;
case 31:
 this.$ = insAPI.do($$[$0-2], $$[$0-6]); 
break;
case 32:
 this.$ = insAPI.bre(); 
break;
case 33:
 this.$ = insAPI.con(); 
break;
case 34:
 this.$ = insAPI.ret('indefinido'); 
break;
case 35:
 this.$ = insAPI.ret($$[$0-1]); 
break;
case 37:
 this.$ = insAPI.dec($$[$0-3], [insAPI.nueVar($$[$0-2], $$[$0])]); 
break;
case 38: case 39:
 this.$ = insAPI.asi($$[$0-2], $$[$0]); 
break;
case 41:
 this.$ = $$[$0]; 
break;
case 42:
 this.$ = ''; 
break;
case 43:
 
        var a = []; 
        if(Array.isArray($$[$0])){ 
            $$[$0].unshift(insAPI.elsif($$[$0-5], $$[$0-2])); 
            this.$ = $$[$0]; 
        } else { 
            if($$[$0] != '')
                a.push($$[$0]);
            a.unshift(insAPI.elsif($$[$0-5], $$[$0-2])); 
            this.$ = a; 
        } 
    
break;
case 44:
 this.$ = insAPI.els($$[$0-1]); 
break;
case 47:
 
        var a = []; 
        if(Array.isArray($$[$0])){ 
            $$[$0].unshift(insAPI.cas($$[$0-3], $$[$0-1])); 
            this.$ = $$[$0]; 
        } else { 
            if($$[$0] != 'indefinido')
                a.push($$[$0]);
            a.unshift(insAPI.cas($$[$0-3], $$[$0-1])); 
            this.$ = a; 
        } 
    
break;
case 48:
 this.$ = insAPI.def($$[$0]); 
break;
case 52: case 85:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 53:
 this.$ = insAPI.nueVar($$[$0], 'indefinido'); 
break;
case 54:
 this.$ = insAPI.nueVar($$[$0-2], $$[$0]); 
break;
case 55:
 this.$ = insAPI.ope($$[$0-2], operacion.and, $$[$0]);
break;
case 56:
 this.$ = insAPI.ope($$[$0-2], operacion.or, $$[$0]); 
break;
case 57:
 this.$ = insAPI.ope($$[$0-2], operacion.igu, $$[$0]); 
break;
case 58:
 this.$ = insAPI.ope($$[$0-2], operacion.may, $$[$0]); 
break;
case 59:
 this.$ = insAPI.ope($$[$0-2], operacion.men, $$[$0]); 
break;
case 60:
 this.$ = insAPI.ope($$[$0-2], operacion.mayigu, $$[$0]); 
break;
case 61:
 this.$ = insAPI.ope($$[$0-2], operacion.menigu, $$[$0]); 
break;
case 62:
 this.$ = insAPI.ope($$[$0-2], operacion.dif, $$[$0]); 
break;
case 63:
 this.$ = insAPI.ope($$[$0-2], operacion.sum, $$[$0]); 
break;
case 64:
 this.$ = insAPI.ope($$[$0-2], operacion.res, $$[$0]); 
break;
case 65:
 this.$ = insAPI.ope($$[$0-2], operacion.mul, $$[$0]); 
break;
case 66:
 this.$ = insAPI.ope($$[$0-2], operacion.div, $$[$0]); 
break;
case 67:
 this.$ = insAPI.ope($$[$0-2], operacion.pot, $$[$0]); 
break;
case 68:
 this.$ = insAPI.ope($$[$0-2], operacion.mod, $$[$0]); 
break;
case 69:
 this.$ = insAPI.ope('indefinido', $$[$0], operacion.neg); 
break;
case 70:
 this.$ = insAPI.ope('indefinido', $$[$0], operacion.not); 
break;
case 71:
 this.$ = insAPI.ope($$[$0-1], operacion.inc, 'indefinido'); 
break;
case 72:
 this.$ = insAPI.ope($$[$0-1], operacion.dec, 'indefinido'); 
break;
case 74:
 this.$ = insAPI.val(tipo.int, $$[$0]);
break;
case 75:
 this.$ = insAPI.val(tipo.dou, $$[$0]);
break;
case 76:
 this.$ = insAPI.val(tipo.str, $$[$0]);
break;
case 77:
 this.$ = insAPI.val(tipo.cha, $$[$0]);
break;
case 78: case 79:
 this.$ = insAPI.val(tipo.boo, $$[$0]);
break;
case 80:
 this.$ = insAPI.val(tipo.ide, $$[$0]);
break;
case 81:
 this.$ = insAPI.llaFun($$[$0-2],'indefinido'); 
break;
case 82:
 this.$ = insAPI.llaFun($$[$0-3], $$[$0-1]); 
break;
case 83:
 this.$ = $$[$0-1]; 
break;
case 88:
 this.$ = [insAPI.decPar($$[$0-1], $$[$0])]; 
break;
case 89:
 $$[$0-3].push(insAPI.decPar($$[$0-1], $$[$0])); this.$ = $$[$0-3]; 
break;
case 97:
 return 'ERROR IRECUPERABLE'; 
break;
}
},
table: [{2:$V0,3:1,4:2,5:[2,3],6:3,7:4,8:$V1,13:$V2},{1:[3]},{5:[1,8]},{2:$V0,5:[2,2],7:9,8:$V1,13:$V2},o($V3,[2,5]),{9:[1,10]},{9:[1,12],14:11},{5:$V4,12:$V5,15:$V6,16:13},{1:[2,1]},o($V3,[2,4]),{10:[1,17]},{15:[1,18],17:[1,19]},o($V7,[2,10]),o($V3,[2,8]),o($V8,[2,95]),o($V8,[2,96]),o($V8,[2,97]),{2:$V9,11:20,12:[2,12],18:21,19:22,20:$Va,26:24,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf},o($V3,[2,7]),{9:[1,31]},{12:[1,32]},{2:$V9,12:[2,11],19:33,20:$Va,26:24,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf},o($Vg,[2,14]),{9:[1,35],21:[1,34]},{9:[1,36],27:37,55:38},{5:$V4,12:$V5,15:$V6,16:39},{9:[2,90]},{9:[2,91]},{9:[2,92]},{9:[2,93]},{9:[2,94]},o($V7,[2,9]),o($V3,[2,6]),o($Vg,[2,13]),{22:[1,40]},{22:[1,41]},o($Vh,$Vi,{22:[1,42],30:$Vj}),{15:[1,44],56:$Vk},o($Vh,[2,51]),o($Vg,[2,19]),{23:[1,46]},{23:$Vl,25:47,26:49,82:48,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf},{23:$Vl,25:50,26:49,82:48,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf},{9:$Vm,22:$Vn,31:51,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},o($Vg,[2,18]),{9:$Vw,55:63},{10:[1,65]},{23:[1,66]},{23:[2,86],56:[1,67]},{9:[1,68]},{23:[1,69]},o($Vh,[2,54],{57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK}),{9:$Vm,22:$Vn,31:84,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{9:$Vm,22:$Vn,31:85,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},o($VL,[2,73],{73:[1,86],74:[1,87]}),o($VM,[2,74]),o($VM,[2,75]),o($VM,[2,76]),o($VM,[2,77]),o($VM,[2,78]),o($VM,[2,79]),o($VM,$VN,{22:$VO}),{9:$Vm,22:$Vn,31:89,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},o($Vh,[2,52]),o($Vh,$Vi,{30:$Vj}),{2:$VP,9:$VQ,12:$VR,24:90,26:93,28:91,29:92,32:$VS,35:$VT,37:$VU,39:$VV,42:$VW,43:$VX,44:$VY,45:$VZ,46:$V_,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf},{10:[1,105]},{26:106,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf},o($V$,[2,88]),{10:[1,107]},{9:$Vm,22:$Vn,31:108,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{9:$Vm,22:$Vn,31:109,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{9:$Vm,22:$Vn,31:110,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{9:$Vm,22:$Vn,31:111,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{9:$Vm,22:$Vn,31:112,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{9:$Vm,22:$Vn,31:113,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{9:$Vm,22:$Vn,31:114,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{9:$Vm,22:$Vn,31:115,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{9:$Vm,22:$Vn,31:116,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{9:$Vm,22:$Vn,31:117,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{9:$Vm,22:$Vn,31:118,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{9:$Vm,22:$Vn,31:119,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{9:$Vm,22:$Vn,31:120,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{9:$Vm,22:$Vn,31:121,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},o($VL,[2,69]),o($VL,[2,70]),o($VL,[2,71]),o($VL,[2,72]),{9:$Vm,22:$Vn,23:[1,122],31:124,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv,81:123},{23:[1,125],57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{12:[1,126]},o($V01,[2,20],{26:93,29:127,2:$VP,9:$VQ,32:$VS,35:$VT,37:$VU,39:$VV,42:$VW,43:$VX,44:$VY,45:$VZ,46:$V_,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf}),o($V11,[2,23]),{9:$Vw,27:128,55:38},{30:[1,129]},{17:[1,130]},{22:[1,131]},{22:[1,132]},{22:[1,133]},{22:[1,134]},{10:[1,135]},{15:[1,136]},{15:[1,137]},{9:$Vm,15:[1,138],22:$Vn,31:139,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{5:$V4,12:$V5,15:$V6,16:140},{2:$VP,9:$VQ,12:$VR,24:141,26:93,28:91,29:92,32:$VS,35:$VT,37:$VU,39:$VV,42:$VW,43:$VX,44:$VY,45:$VZ,46:$V_,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf},{9:[1,142]},{2:$VP,9:$VQ,12:$VR,24:143,26:93,28:91,29:92,32:$VS,35:$VT,37:$VU,39:$VV,42:$VW,43:$VX,44:$VY,45:$VZ,46:$V_,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf},o($V21,[2,55],{59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK}),o($V21,[2,56],{59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK}),o($V31,[2,57],{65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK}),o($V31,[2,58],{65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK}),o($V31,[2,59],{65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK}),o($V31,[2,60],{65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK}),o($V31,[2,61],{65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK}),o($V31,[2,62],{65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK}),o($V41,[2,63],{67:$VH,68:$VI,69:$VJ,70:$VK}),o($V41,[2,64],{67:$VH,68:$VI,69:$VJ,70:$VK}),o($V51,[2,65],{69:$VJ,70:$VK}),o($V51,[2,66],{69:$VJ,70:$VK}),o($VL,[2,67]),o($VL,[2,68]),o($VM,[2,81]),{23:[1,144],56:[1,145]},o($V$,[2,84],{57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK}),o($VM,[2,83]),o($Vg,[2,15]),o($V11,[2,22]),{15:[1,146],56:$Vk},{9:$Vm,22:$Vn,31:147,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{33:[1,148]},{9:$Vm,22:$Vn,31:149,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{9:$Vm,22:$Vn,31:150,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{9:[1,153],26:152,40:151,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf},{9:$Vm,22:$Vn,31:154,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{2:$VP,9:$VQ,12:$VR,24:155,26:93,28:91,29:92,32:$VS,35:$VT,37:$VU,39:$VV,42:$VW,43:$VX,44:$VY,45:$VZ,46:$V_,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf},o($V11,[2,32]),o($V11,[2,33]),o($V11,[2,34]),{15:[1,156],57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},o($V11,[2,36]),{12:[1,157]},o($V$,[2,89]),{12:[1,158]},o($VM,[2,82]),{9:$Vm,22:$Vn,31:159,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},o($V11,[2,24]),{15:[1,160],57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{17:[1,161]},{23:[1,162],57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{23:[1,163],57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{15:[1,164]},{9:[1,165]},{30:[1,166]},{23:[1,167],57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{12:[1,168]},o($V11,[2,35]),o($Vg,[2,16]),o($Vg,[2,17]),o($V$,[2,85],{57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK}),o($V11,[2,25]),{34:169,53:[1,170],54:[1,171]},{10:[1,172]},{10:[1,173]},{9:$Vm,22:$Vn,31:174,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{30:[1,175]},{9:$Vm,22:$Vn,31:176,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{10:[1,177]},{42:[1,178]},{22:[1,179]},{22:[2,49]},{22:[2,50]},{2:$VP,9:$VQ,12:$VR,24:180,26:93,28:91,29:92,32:$VS,35:$VT,37:$VU,39:$VV,42:$VW,43:$VX,44:$VY,45:$VZ,46:$V_,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf},{12:$V61,38:181,49:182,50:$V71,52:$V81},{15:[1,185],57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{9:$Vm,22:$Vn,31:186,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{15:[2,38],57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{2:$VP,9:$VQ,12:$VR,24:187,26:93,28:91,29:92,32:$VS,35:$VT,37:$VU,39:$VV,42:$VW,43:$VX,44:$VY,45:$VZ,46:$V_,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf},{22:[1,188]},{9:$Vm,22:$Vn,31:189,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{12:[1,190]},{12:[1,191]},{12:[2,45]},{9:$Vm,22:$Vn,31:192,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{51:[1,193]},{9:[1,195],22:$Vn,31:196,41:194,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{15:[2,37],57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{12:[1,197]},{9:$Vm,22:$Vn,31:198,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{23:[1,199],57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},o($V11,$V91,{36:200,47:$Va1}),o($V11,[2,28]),{51:[1,202],57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{2:$VP,9:$VQ,12:$VR,24:203,26:93,28:91,29:92,32:$VS,35:$VT,37:$VU,39:$VV,42:$VW,43:$VX,44:$VY,45:$VZ,46:$V_,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf},{23:[1,204]},o([23,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74],$VN,{22:$VO,30:[1,205]}),{23:[2,40],57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},o($V11,[2,30]),{23:[1,206],57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},{15:[1,207]},o($V11,[2,27]),{10:[1,210],35:[1,209],48:208},o($V01,$VR,{28:91,29:92,26:93,24:211,2:$VP,9:$VQ,32:$VS,35:$VT,37:$VU,39:$VV,42:$VW,43:$VX,44:$VY,45:$VZ,46:$V_,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf}),{12:[2,48]},{10:[1,212]},{9:$Vm,22:$Vn,31:213,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{15:[1,214]},o($V11,[2,26]),o($V11,[2,41]),{22:[1,215]},{2:$VP,9:$VQ,12:$VR,24:216,26:93,28:91,29:92,32:$VS,35:$VT,37:$VU,39:$VV,42:$VW,43:$VX,44:$VY,45:$VZ,46:$V_,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf},{12:$V61,38:217,49:182,50:$V71,52:$V81},{2:$VP,9:$VQ,12:$VR,24:218,26:93,28:91,29:92,32:$VS,35:$VT,37:$VU,39:$VV,42:$VW,43:$VX,44:$VY,45:$VZ,46:$V_,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf},{23:[2,39],57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},o($V11,[2,31]),{9:$Vm,22:$Vn,31:219,66:$Vo,71:$Vp,72:54,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{12:[1,220]},{12:[2,47]},{12:[1,221]},{23:[1,222],57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK},o($V11,[2,44]),o($V11,[2,29]),{10:[1,223]},{2:$VP,9:$VQ,12:$VR,24:224,26:93,28:91,29:92,32:$VS,35:$VT,37:$VU,39:$VV,42:$VW,43:$VX,44:$VY,45:$VZ,46:$V_,83:$Vb,84:$Vc,85:$Vd,86:$Ve,87:$Vf},{12:[1,225]},o($V11,$V91,{36:226,47:$Va1}),o($V11,[2,43])],
defaultActions: {8:[2,1],26:[2,90],27:[2,91],28:[2,92],29:[2,93],30:[2,94],170:[2,49],171:[2,50],182:[2,45],203:[2,48],217:[2,47]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const tipo	= require('./apiJson').tipo;
    const operacion	= require('./apiJson').operacion;
    const insAPI = require('./apiJson').insAPI;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple
break;
case 1:// comentario multilinea
break;
case 2: yy_.yytext.substr(1,yy_.yyleng-2); return 78; 
break;
case 3: yy_.yytext.substr(1,yy_.yyleng-2); return 78; 
break;
case 4: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 77; 
break;
case 5: return 13; 
break;
case 6: return 8; 
break;
case 7: return 'tkRPub'; 
break;
case 8: return 53; 
break;
case 9: return 'tkRPro'; 
break;
case 10: return 'tkRSta'; 
break;
case 11: return 20; 
break;
case 12: return 21; 
break;
case 13: return 83; 
break;
case 14: return 84; 
break;
case 15: return 87; 
break;
case 16: return 85; 
break;
case 17: return 86; 
break;
case 18: return 79; 
break;
case 19: return 80; 
break;
case 20: return 32; 
break;
case 21: return 33; 
break;
case 22: return 53; 
break;
case 23: return 54; 
break;
case 24: return 44; 
break;
case 25: return 45; 
break;
case 26: return 46; 
break;
case 27: return 35; 
break;
case 28: return 47; 
break;
case 29: return 37; 
break;
case 30: return 50; 
break;
case 31: return 52; 
break;
case 32: return 39; 
break;
case 33: return 42; 
break;
case 34: return 43; 
break;
case 35: return 73; 
break;
case 36: return 65; 
break;
case 37: return 74; 
break;
case 38: return 66; 
break;
case 39: return 67; 
break;
case 40: return 68; 
break;
case 41: return 69; 
break;
case 42: return 70; 
break;
case 43: return 'tkSComSim'; 
break;
case 44: return 'tkSComDob'; 
break;
case 45: return 'tkSBarInv'; 
break;
case 46: return 57; 
break;
case 47: return 58; 
break;
case 48: return 64; 
break;
case 49: return 71; 
break;
case 50: return 59; 
break;
case 51: return 30; 
break;
case 52: return 61; 
break;
case 53: return 60; 
break;
case 54: return 63; 
break;
case 55: return 62; 
break;
case 56: return 56; 
break;
case 57: return 17; 
break;
case 58: return 15; 
break;
case 59: return 51; 
break;
case 60: return 22; 
break;
case 61: return 23; 
break;
case 62: return 10; 
break;
case 63: return 12; 
break;
case 64: return 9; 
break;
case 65: return 76; 
break;
case 66: return 75; 
break;
case 67:// se ignoran espacios en blanco
break;
case 68:return 5;       // fin del archivo
break;
case 69: console.log('Error Lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/[^\n]*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[\'][\\][ntr\"\'\\][\'])/,/^(?:[\'][^\'\"\\][\'])/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:import\b)/,/^(?:class\b)/,/^(?:public\b)/,/^(?:private\b)/,/^(?:protected\b)/,/^(?:static\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:')/,/^(?:")/,/^(?:\\)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!=)/,/^(?:!)/,/^(?:==)/,/^(?:=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:\s+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}