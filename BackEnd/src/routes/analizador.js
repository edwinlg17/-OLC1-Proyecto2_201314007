/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,5],$V2=[1,6],$V3=[2,5,8,13],$V4=[15,16],$V5=[1,21],$V6=[1,19],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[2,12,19,82,83,84,85,86],$Vd=[15,56],$Ve=[2,55],$Vf=[1,38],$Vg=[1,40],$Vh=[2,89],$Vi=[1,56],$Vj=[1,57],$Vk=[1,47],$Vl=[1,48],$Vm=[1,50],$Vn=[1,51],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,59],$Vt=[1,65],$Vu=[1,66],$Vv=[1,67],$Vw=[1,68],$Vx=[1,69],$Vy=[1,70],$Vz=[1,71],$VA=[1,72],$VB=[1,73],$VC=[1,74],$VD=[1,75],$VE=[1,76],$VF=[1,77],$VG=[1,78],$VH=[15,22,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],$VI=[15,22,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74],$VJ=[2,82],$VK=[1,83],$VL=[1,99],$VM=[1,89],$VN=[2,21],$VO=[1,90],$VP=[1,91],$VQ=[1,92],$VR=[1,93],$VS=[1,94],$VT=[1,95],$VU=[1,96],$VV=[1,97],$VW=[1,98],$VX=[22,56],$VY=[12,50,52],$VZ=[2,9,12,31,34,36,38,41,42,44,45,46,50,52,82,83,84,85,86],$V_=[15,22,51,56,57,58],$V$=[15,22,51,56,57,58,59,60,61,62,63,64],$V01=[15,22,51,56,57,58,59,60,61,62,63,64,65,66],$V11=[15,22,51,56,57,58,59,60,61,62,63,64,65,66,67,68],$V21=[1,140],$V31=[2,48],$V41=[1,183],$V51=[1,184],$V61=[2,44],$V71=[1,201];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"CLAIMP":4,"EOF":5,"CLAIMPP":6,"SINCLAIMP":7,"tkRCla":8,"tkIde":9,"tkSLlaAbr":10,"MMFV":11,"tkSLlaCie":12,"tkRImp":13,"ESPIMP":14,"tkSPunCom":15,"tkSPun":16,"MMFVP":17,"SINMMFV":18,"tkRVoi":19,"tkRMai":20,"tkSParAbr":21,"tkSParCie":22,"INS":23,"PAR":24,"TIP":25,"DECVARMUL":26,"INSP":27,"SININS":28,"tkSIgu":29,"EXP":30,"tkRSis":31,"tkROut":32,"PRI":33,"tkRIf":34,"ELS":35,"tkRSwi":36,"CAS":37,"tkRFor":38,"DECASI":39,"ASIINC":40,"tkRWhi":41,"tkRDo":42,"LISEXP":43,"tkRBre":44,"tkRCon":45,"tkRRet":46,"tkREls":47,"SINELS":48,"CASP":49,"tkRCas":50,"tkSDosPun":51,"tkRDef":52,"tkRPri":53,"tkRPriLn":54,"SINVAR":55,"tkSCom":56,"tkSAnd":57,"tkSOr":58,"tkSDIgu":59,"tkSMay":60,"tkSMayIgu":61,"tkSMen":62,"tkSMenIgu":63,"tkSDif":64,"tkSMas":65,"tkSGui":66,"tkSPor":67,"tkSBarInc":68,"tkSPot":69,"tkSMod":70,"tkSAdm":71,"VAL":72,"tkSInc":73,"tkSDec":74,"tkNum":75,"tkDec":76,"tkCad":77,"tkCar":78,"tkRTru":79,"tkRFal":80,"LISPAR":81,"tkRInt":82,"tkRDou":83,"tkRCha":84,"tkRStr":85,"tkRBoo":86,"REQ":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"tkRCla",9:"tkIde",10:"tkSLlaAbr",12:"tkSLlaCie",13:"tkRImp",15:"tkSPunCom",16:"tkSPun",19:"tkRVoi",20:"tkRMai",21:"tkSParAbr",22:"tkSParCie",29:"tkSIgu",31:"tkRSis",32:"tkROut",34:"tkRIf",36:"tkRSwi",38:"tkRFor",41:"tkRWhi",42:"tkRDo",44:"tkRBre",45:"tkRCon",46:"tkRRet",47:"tkREls",50:"tkRCas",51:"tkSDosPun",52:"tkRDef",53:"tkRPri",54:"tkRPriLn",56:"tkSCom",57:"tkSAnd",58:"tkSOr",59:"tkSDIgu",60:"tkSMay",61:"tkSMayIgu",62:"tkSMen",63:"tkSMenIgu",64:"tkSDif",65:"tkSMas",66:"tkSGui",67:"tkSPor",68:"tkSBarInc",69:"tkSPot",70:"tkSMod",71:"tkSAdm",73:"tkSInc",74:"tkSDec",75:"tkNum",76:"tkDec",77:"tkCad",78:"tkCar",79:"tkRTru",80:"tkRFal",82:"tkRInt",83:"tkRDou",84:"tkRCha",85:"tkRStr",86:"tkRBoo"},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[6,1],[7,5],[7,3],[7,1],[14,3],[14,1],[11,1],[11,0],[17,2],[17,1],[18,7],[18,8],[18,8],[18,3],[18,1],[23,1],[23,0],[27,2],[27,1],[28,3],[28,4],[28,9],[28,8],[28,7],[28,11],[28,7],[28,9],[28,4],[28,5],[28,2],[28,2],[28,2],[28,3],[28,1],[39,4],[39,3],[40,3],[40,1],[35,2],[35,0],[48,8],[48,3],[37,1],[37,0],[49,5],[49,3],[33,1],[33,1],[26,1],[26,3],[55,1],[55,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,2],[30,2],[30,2],[30,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,3],[72,4],[72,3],[43,1],[43,3],[24,1],[24,0],[81,2],[81,4],[25,1],[25,1],[25,1],[25,1],[25,1],[87,1],[87,1],[87,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 3: case 12: case 21:
 this.$ = [{text: 'indefinido', 'icon': './img/atr.png'}]; 
break;
case 4: case 13: case 22:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 5: case 14: case 53: case 86:
 this.$ = [$$[$0]]; 
break;
case 6:
 this.$ = insAPI.cla($$[$0-3], $$[$0-1]); 
break;
case 7:
 this.$ = insAPI.imp($$[$0-1]); 
break;
case 8:
 this.$ = ''; console.log('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 9:
 $$[$0-2].push(insAPI.val('identificador',$$[$0])); this.$ = $$[$0-2]; 
break;
case 10:
 this.$ = [insAPI.val('identificador', $$[$0])]; 
break;
case 15:
 this.$ = insAPI.mai($$[$0-1]); 
break;
case 16:
 this.$ = insAPI.met($$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 17:
 this.$ = insAPI.fun($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 18: case 24:
 this.$ = insAPI.dec($$[$0-2], $$[$0-1]); 
break;
case 19:
 this.$ = ''; console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 23:
 
        if(Array.isArray($$[$0])) { 
            this.$ = $$[$0]; 
        } else { 
            this.$ = [$$[$0]]; 
        } 
    
break;
case 25:
 this.$ = insAPI.asi($$[$0-3], $$[$0-1]); 
break;
case 26:
 this.$ = insAPI.pri($$[$0-4], $$[$0-2]); 
break;
case 27:
 
        var a = []; 
        if(Array.isArray($$[$0])){ 
            $$[$0].unshift(insAPI.if($$[$0-5], $$[$0-2])); 
            this.$ = insAPI.insIf($$[$0]); 
        } else { 
            if($$[$0] != '')
                a.push($$[$0]);
            a.unshift(insAPI.if($$[$0-5], $$[$0-2])); 
            this.$ = insAPI.insIf(a); 
        } 
    
break;
case 28:
 
        if(Array.isArray($$[$0-1])){ 
            this.$ = insAPI.swi($$[$0-4], $$[$0-1]);
        } else { 
            if($$[$0-1] == '')
                this.$ = insAPI.swi($$[$0-4], [{text: 'indefinido', 'icon': './img/atr.png'}]);
                else
                this.$ = insAPI.swi($$[$0-4], [$$[$0-1]]);
            
        }
     
break;
case 29:
 this.$ = insAPI.for($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1]); 
break;
case 30:
 this.$ = insAPI.whi($$[$0-4], $$[$0-1]);  
break;
case 31:
 this.$ = insAPI.do($$[$0-2], $$[$0-6]); 
break;
case 32:
 this.$ = insAPI.llaFun($$[$0-3],[{text: 'indefinido', 'icon': './img/atr.png'}]); 
break;
case 33:
 this.$ = insAPI.llaFun($$[$0-4], $$[$0-2]); 
break;
case 34:
 this.$ = insAPI.bre(); 
break;
case 35:
 this.$ = insAPI.con(); 
break;
case 36:
 this.$ = insAPI.ret({text: 'indefinido', 'icon': './img/atr.png'}); 
break;
case 37:
 this.$ = insAPI.ret($$[$0-1]); 
break;
case 38:
 this.$ = ''; err.push({err:'Error Sintactico', lin:this._$.first_line, col: this._$.first_column}); console.error('Este es un error sintáctico: ' +yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 39:
 this.$ = insAPI.dec($$[$0-3], [insAPI.nueVar($$[$0-2], $$[$0])]); 
break;
case 40: case 41:
 this.$ = insAPI.asi($$[$0-2], $$[$0]); 
break;
case 43:
 this.$ = $$[$0]; 
break;
case 44: case 48:
 this.$ = ''; 
break;
case 45:
 
        var a = []; 
        if(Array.isArray($$[$0])){ 
            $$[$0].unshift(insAPI.elsif($$[$0-5], $$[$0-2])); 
            this.$ = $$[$0]; 
        } else { 
            if($$[$0] != '')
                a.push($$[$0]);
            a.unshift(insAPI.elsif($$[$0-5], $$[$0-2])); 
            this.$ = a; 
        } 
    
break;
case 46:
 this.$ = insAPI.els($$[$0-1]); 
break;
case 49:
 
        var a = []; 
        if(Array.isArray($$[$0])){ 
            $$[$0].unshift(insAPI.cas($$[$0-3], $$[$0-1])); 
            this.$ = $$[$0]; 
        } else { 
            if($$[$0] != '')
                a.push($$[$0]);
            a.unshift(insAPI.cas($$[$0-3], $$[$0-1])); 
            this.$ = a; 
        } 
    
break;
case 50:
 this.$ = insAPI.def($$[$0]); 
break;
case 54: case 87:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 55:
 this.$ = insAPI.nueVar($$[$0], {text: 'indefinido', 'icon': './img/atr.png'}); 
break;
case 56:
 this.$ = insAPI.nueVar($$[$0-2], $$[$0]); 
break;
case 57:
 this.$ = insAPI.ope($$[$0-2], operacion.and, $$[$0]);
break;
case 58:
 this.$ = insAPI.ope($$[$0-2], operacion.or, $$[$0]); 
break;
case 59:
 this.$ = insAPI.ope($$[$0-2], operacion.igu, $$[$0]); 
break;
case 60:
 this.$ = insAPI.ope($$[$0-2], operacion.may, $$[$0]); 
break;
case 61:
 this.$ = insAPI.ope($$[$0-2], operacion.mayigu, $$[$0]); 
break;
case 62:
 this.$ = insAPI.ope($$[$0-2], operacion.men, $$[$0]); 
break;
case 63:
 this.$ = insAPI.ope($$[$0-2], operacion.menigu, $$[$0]); 
break;
case 64:
 this.$ = insAPI.ope($$[$0-2], operacion.dif, $$[$0]); 
break;
case 65:
 this.$ = insAPI.ope($$[$0-2], operacion.sum, $$[$0]); 
break;
case 66:
 this.$ = insAPI.ope($$[$0-2], operacion.res, $$[$0]); 
break;
case 67:
 this.$ = insAPI.ope($$[$0-2], operacion.mul, $$[$0]); 
break;
case 68:
 this.$ = insAPI.ope($$[$0-2], operacion.div, $$[$0]); 
break;
case 69:
 this.$ = insAPI.ope($$[$0-2], operacion.pot, $$[$0]); 
break;
case 70:
 this.$ = insAPI.ope($$[$0-2], operacion.mod, $$[$0]); 
break;
case 71:
 this.$ = insAPI.opeUna( operacion.neg, $$[$0] ); 
break;
case 72:
 this.$ = insAPI.opeUna( operacion.not, $$[$0] ); 
break;
case 73:
 this.$ = insAPI.opeUna( operacion.inc, $$[$0-1] ); 
break;
case 74:
 this.$ = insAPI.opeUna( operacion.dec, $$[$0-1] ); 
break;
case 76:
 this.$ = insAPI.val(tipo.int, $$[$0]);
break;
case 77:
 this.$ = insAPI.val(tipo.dou, $$[$0]);
break;
case 78:
 this.$ = insAPI.val(tipo.str, $$[$0]);
break;
case 79:
 this.$ = insAPI.val(tipo.cha, $$[$0]);
break;
case 80: case 81:
 this.$ = insAPI.val(tipo.boo, $$[$0]);
break;
case 82:
 this.$ = insAPI.val(tipo.ide, $$[$0]);
break;
case 83:
 this.$ = insAPI.llaFun($$[$0-2],[{text: 'indefinido', 'icon': './img/atr.png'}]); 
break;
case 84:
 this.$ = insAPI.llaFun($$[$0-3], $$[$0-1]); 
break;
case 85:
 this.$ = $$[$0-1]; 
break;
case 89:
 this.$ = [{text: 'indefinido'}]; 
break;
case 90:
 this.$ = [insAPI.decPar($$[$0-1], $$[$0])]; 
break;
case 91:
 $$[$0-3].push(insAPI.decPar($$[$0-1], $$[$0])); this.$ = $$[$0-3]; 
break;
case 99:
 return 'ERROR IRECUPERABLE'; 
break;
}
},
table: [{2:$V0,3:1,4:2,5:[2,3],6:3,7:4,8:$V1,13:$V2},{1:[3]},{5:[1,8]},{2:$V0,5:[2,2],7:9,8:$V1,13:$V2},o($V3,[2,5]),{9:[1,10]},{9:[1,12],14:11},o($V3,[2,8]),{1:[2,1]},o($V3,[2,4]),{10:[1,13]},{15:[1,14],16:[1,15]},o($V4,[2,10]),{2:$V5,11:16,12:[2,12],17:17,18:18,19:$V6,25:20,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb},o($V3,[2,7]),{9:[1,27]},{12:[1,28]},{2:$V5,12:[2,11],18:29,19:$V6,25:20,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb},o($Vc,[2,14]),{9:[1,31],20:[1,30]},{9:[1,32],26:33,55:34},o($Vc,[2,19]),{9:[2,92]},{9:[2,93]},{9:[2,94]},{9:[2,95]},{9:[2,96]},o($V4,[2,9]),o($V3,[2,6]),o($Vc,[2,13]),{21:[1,35]},{21:[1,36]},o($Vd,$Ve,{21:[1,37],29:$Vf}),{15:[1,39],56:$Vg},o($Vd,[2,53]),{22:[1,41]},{22:$Vh,24:42,25:44,81:43,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb},{22:$Vh,24:45,25:44,81:43,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb},{9:$Vi,21:$Vj,30:46,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},o($Vc,[2,18]),{9:$Vs,55:58},{10:[1,60]},{22:[1,61]},{22:[2,88],56:[1,62]},{9:[1,63]},{22:[1,64]},o($Vd,[2,56],{57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG}),{9:$Vi,21:$Vj,30:79,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{9:$Vi,21:$Vj,30:80,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},o($VH,[2,75],{73:[1,81],74:[1,82]}),o($VI,[2,76]),o($VI,[2,77]),o($VI,[2,78]),o($VI,[2,79]),o($VI,[2,80]),o($VI,[2,81]),o($VI,$VJ,{21:$VK}),{9:$Vi,21:$Vj,30:84,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},o($Vd,[2,54]),o($Vd,$Ve,{29:$Vf}),{2:$VL,9:$VM,12:$VN,23:85,25:88,27:86,28:87,31:$VO,34:$VP,36:$VQ,38:$VR,41:$VS,42:$VT,44:$VU,45:$VV,46:$VW,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb},{10:[1,100]},{25:101,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb},o($VX,[2,90]),{10:[1,102]},{9:$Vi,21:$Vj,30:103,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{9:$Vi,21:$Vj,30:104,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{9:$Vi,21:$Vj,30:105,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{9:$Vi,21:$Vj,30:106,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{9:$Vi,21:$Vj,30:107,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{9:$Vi,21:$Vj,30:108,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{9:$Vi,21:$Vj,30:109,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{9:$Vi,21:$Vj,30:110,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{9:$Vi,21:$Vj,30:111,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{9:$Vi,21:$Vj,30:112,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{9:$Vi,21:$Vj,30:113,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{9:$Vi,21:$Vj,30:114,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{9:$Vi,21:$Vj,30:115,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{9:$Vi,21:$Vj,30:116,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},o($VH,[2,71]),o($VH,[2,72]),o($VH,[2,73]),o($VH,[2,74]),{9:$Vi,21:$Vj,22:[1,117],30:119,43:118,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{22:[1,120],57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{12:[1,121]},o($VY,[2,20],{25:88,28:122,2:$VL,9:$VM,31:$VO,34:$VP,36:$VQ,38:$VR,41:$VS,42:$VT,44:$VU,45:$VV,46:$VW,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb}),o($VZ,[2,23]),{9:$Vs,26:123,55:34},{21:[1,125],29:[1,124]},{16:[1,126]},{21:[1,127]},{21:[1,128]},{21:[1,129]},{21:[1,130]},{10:[1,131]},{15:[1,132]},{15:[1,133]},{9:$Vi,15:[1,134],21:$Vj,30:135,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},o($VZ,[2,38]),{2:$VL,9:$VM,12:$VN,23:136,25:88,27:86,28:87,31:$VO,34:$VP,36:$VQ,38:$VR,41:$VS,42:$VT,44:$VU,45:$VV,46:$VW,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb},{9:[1,137]},{2:$VL,9:$VM,12:$VN,23:138,25:88,27:86,28:87,31:$VO,34:$VP,36:$VQ,38:$VR,41:$VS,42:$VT,44:$VU,45:$VV,46:$VW,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb},o($V_,[2,57],{59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG}),o($V_,[2,58],{59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG}),o($V$,[2,59],{65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG}),o($V$,[2,60],{65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG}),o($V$,[2,61],{65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG}),o($V$,[2,62],{65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG}),o($V$,[2,63],{65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG}),o($V$,[2,64],{65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG}),o($V01,[2,65],{67:$VD,68:$VE,69:$VF,70:$VG}),o($V01,[2,66],{67:$VD,68:$VE,69:$VF,70:$VG}),o($V11,[2,67],{69:$VF,70:$VG}),o($V11,[2,68],{69:$VF,70:$VG}),o($VH,[2,69]),o($VH,[2,70]),o($VI,[2,83]),{22:[1,139],56:$V21},o($VX,[2,86],{57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG}),o($VI,[2,85]),o($Vc,[2,15]),o($VZ,[2,22]),{15:[1,141],56:$Vg},{9:$Vi,21:$Vj,30:142,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{9:$Vi,21:$Vj,22:[1,143],30:119,43:144,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{32:[1,145]},{9:$Vi,21:$Vj,30:146,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{9:$Vi,21:$Vj,30:147,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{9:[1,150],25:149,39:148,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb},{9:$Vi,21:$Vj,30:151,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{2:$VL,9:$VM,12:$VN,23:152,25:88,27:86,28:87,31:$VO,34:$VP,36:$VQ,38:$VR,41:$VS,42:$VT,44:$VU,45:$VV,46:$VW,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb},o($VZ,[2,34]),o($VZ,[2,35]),o($VZ,[2,36]),{15:[1,153],57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{12:[1,154]},o($VX,[2,91]),{12:[1,155]},o($VI,[2,84]),{9:$Vi,21:$Vj,30:156,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},o($VZ,[2,24]),{15:[1,157],57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{15:[1,158]},{22:[1,159],56:$V21},{16:[1,160]},{22:[1,161],57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{22:[1,162],57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{15:[1,163]},{9:[1,164]},{29:[1,165]},{22:[1,166],57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{12:[1,167]},o($VZ,[2,37]),o($Vc,[2,16]),o($Vc,[2,17]),o($VX,[2,87],{57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG}),o($VZ,[2,25]),o($VZ,[2,32]),{15:[1,168]},{33:169,53:[1,170],54:[1,171]},{10:[1,172]},{10:[1,173]},{9:$Vi,21:$Vj,30:174,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{29:[1,175]},{9:$Vi,21:$Vj,30:176,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{10:[1,177]},{41:[1,178]},o($VZ,[2,33]),{21:[1,179]},{21:[2,51]},{21:[2,52]},{2:$VL,9:$VM,12:$VN,23:180,25:88,27:86,28:87,31:$VO,34:$VP,36:$VQ,38:$VR,41:$VS,42:$VT,44:$VU,45:$VV,46:$VW,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb},{12:$V31,37:181,49:182,50:$V41,52:$V51},{15:[1,185],57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{9:$Vi,21:$Vj,30:186,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{15:[2,40],57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{2:$VL,9:$VM,12:$VN,23:187,25:88,27:86,28:87,31:$VO,34:$VP,36:$VQ,38:$VR,41:$VS,42:$VT,44:$VU,45:$VV,46:$VW,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb},{21:[1,188]},{9:$Vi,21:$Vj,30:189,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{12:[1,190]},{12:[1,191]},{12:[2,47]},{9:$Vi,21:$Vj,30:192,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{51:[1,193]},{9:[1,195],21:$Vj,30:196,40:194,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{15:[2,39],57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{12:[1,197]},{9:$Vi,21:$Vj,30:198,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{22:[1,199],57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},o($VZ,$V61,{35:200,47:$V71}),o($VZ,[2,28]),{51:[1,202],57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{2:$VL,9:$VM,12:$VN,23:203,25:88,27:86,28:87,31:$VO,34:$VP,36:$VQ,38:$VR,41:$VS,42:$VT,44:$VU,45:$VV,46:$VW,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb},{22:[1,204]},o([22,57,58,59,60,61,62,63,64,65,66,67,68,69,70,73,74],$VJ,{21:$VK,29:[1,205]}),{22:[2,42],57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},o($VZ,[2,30]),{22:[1,206],57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{15:[1,207]},o($VZ,[2,27]),{10:[1,210],34:[1,209],48:208},o($VY,$VN,{27:86,28:87,25:88,23:211,2:$VL,9:$VM,31:$VO,34:$VP,36:$VQ,38:$VR,41:$VS,42:$VT,44:$VU,45:$VV,46:$VW,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb}),{12:[2,50]},{10:[1,212]},{9:$Vi,21:$Vj,30:213,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{15:[1,214]},o($VZ,[2,26]),o($VZ,[2,43]),{21:[1,215]},{2:$VL,9:$VM,12:$VN,23:216,25:88,27:86,28:87,31:$VO,34:$VP,36:$VQ,38:$VR,41:$VS,42:$VT,44:$VU,45:$VV,46:$VW,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb},{12:$V31,37:217,49:182,50:$V41,52:$V51},{2:$VL,9:$VM,12:$VN,23:218,25:88,27:86,28:87,31:$VO,34:$VP,36:$VQ,38:$VR,41:$VS,42:$VT,44:$VU,45:$VV,46:$VW,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb},{22:[2,41],57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},o($VZ,[2,31]),{9:$Vi,21:$Vj,30:219,66:$Vk,71:$Vl,72:49,75:$Vm,76:$Vn,77:$Vo,78:$Vp,79:$Vq,80:$Vr},{12:[1,220]},{12:[2,49]},{12:[1,221]},{22:[1,222],57:$Vt,58:$Vu,59:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},o($VZ,[2,46]),o($VZ,[2,29]),{10:[1,223]},{2:$VL,9:$VM,12:$VN,23:224,25:88,27:86,28:87,31:$VO,34:$VP,36:$VQ,38:$VR,41:$VS,42:$VT,44:$VU,45:$VV,46:$VW,82:$V7,83:$V8,84:$V9,85:$Va,86:$Vb},{12:[1,225]},o($VZ,$V61,{35:226,47:$V71}),o($VZ,[2,45])],
defaultActions: {8:[2,1],22:[2,92],23:[2,93],24:[2,94],25:[2,95],26:[2,96],170:[2,51],171:[2,52],182:[2,47],203:[2,50],217:[2,49]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const tipo	= require('./apiJson').tipo;
    const operacion	= require('./apiJson').operacion;
    const insAPI = require('./apiJson').insAPI;

    let err = [];

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple
break;
case 1:// comentario multilinea
break;
case 2: yy_.yytext.substr(1,yy_.yyleng-2); return 78; 
break;
case 3: yy_.yytext.substr(1,yy_.yyleng-2); return 78; 
break;
case 4: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 77; 
break;
case 5: return 13; 
break;
case 6: return 8; 
break;
case 7: return 'tkRPub'; 
break;
case 8: return 53; 
break;
case 9: return 'tkRPro'; 
break;
case 10: return 'tkRSta'; 
break;
case 11: return 19; 
break;
case 12: return 20; 
break;
case 13: return 82; 
break;
case 14: return 83; 
break;
case 15: return 86; 
break;
case 16: return 84; 
break;
case 17: return 85; 
break;
case 18: return 79; 
break;
case 19: return 80; 
break;
case 20: return 31; 
break;
case 21: return 32; 
break;
case 22: return 53; 
break;
case 23: return 54; 
break;
case 24: return 44; 
break;
case 25: return 45; 
break;
case 26: return 46; 
break;
case 27: return 34; 
break;
case 28: return 47; 
break;
case 29: return 36; 
break;
case 30: return 50; 
break;
case 31: return 52; 
break;
case 32: return 38; 
break;
case 33: return 41; 
break;
case 34: return 42; 
break;
case 35: return 73; 
break;
case 36: return 65; 
break;
case 37: return 74; 
break;
case 38: return 66; 
break;
case 39: return 67; 
break;
case 40: return 68; 
break;
case 41: return 69; 
break;
case 42: return 70; 
break;
case 43: return 'tkSComSim'; 
break;
case 44: return 'tkSComDob'; 
break;
case 45: return 'tkSBarInv'; 
break;
case 46: return 57; 
break;
case 47: return 58; 
break;
case 48: return 64; 
break;
case 49: return 71; 
break;
case 50: return 59; 
break;
case 51: return 29; 
break;
case 52: return 61; 
break;
case 53: return 60; 
break;
case 54: return 63; 
break;
case 55: return 62; 
break;
case 56: return 56; 
break;
case 57: return 16; 
break;
case 58: return 15; 
break;
case 59: return 51; 
break;
case 60: return 21; 
break;
case 61: return 22; 
break;
case 62: return 10; 
break;
case 63: return 12; 
break;
case 64: return 9; 
break;
case 65: return 76; 
break;
case 66: return 75; 
break;
case 67:// se ignoran espacios en blanco
break;
case 68:return 5;       // fin del archivo
break;
case 69: console.log('Error Lexico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/[^\n]*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[\'][\\][ntr\"\'\\][\'])/,/^(?:[\'][^\'\"\\][\'])/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:import\b)/,/^(?:class\b)/,/^(?:public\b)/,/^(?:private\b)/,/^(?:protected\b)/,/^(?:static\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:System\b)/,/^(?:out\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:')/,/^(?:")/,/^(?:\\)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!=)/,/^(?:!)/,/^(?:==)/,/^(?:=)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:,)/,/^(?:\.)/,/^(?:;)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:\s+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}